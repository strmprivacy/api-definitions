syntax = "proto3";

package strmprivacy.api.data_contracts.v1;

import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";
import "strmprivacy/api/entities/v1/entities_v1.proto";
import "validate/validate.proto";

option go_package = "github.com/strmprivacy/api-definitions-go/v2/api/data_contracts/v1;data_contracts";
option java_package = "io.strmprivacy.api.data_contracts.v1";
option java_multiple_files = true;

service DataContractsService {
  rpc ListDataContracts (ListDataContractsRequest) returns (ListDataContractsResponse);
  rpc GetDataContract (GetDataContractRequest) returns (GetDataContractResponse);
  rpc CreateDataContract (CreateDataContractRequest) returns (CreateDataContractResponse);
  rpc UpdateDataContract (UpdateDataContractRequest) returns (UpdateDataContractResponse);
  rpc ReviewDataContract (ReviewDataContractRequest) returns (ReviewDataContractResponse);
  rpc ActivateDataContract (ActivateDataContractRequest) returns (ActivateDataContractResponse);
  rpc DeleteDataContract (DeleteDataContractRequest) returns (DeleteDataContractResponse);
  rpc ArchiveDataContract (ArchiveDataContractRequest) returns (ArchiveDataContractResponse);
  rpc GetDataContractSchemaCode (GetDataContractSchemaCodeRequest) returns (GetDataContractSchemaCodeResponse);
  rpc GetDataContractSchemaDefinition (GetDataContractSchemaDefinitionRequest) returns (GetDataContractSchemaDefinitionResponse);
  rpc ValidateDataContractsMaskedFields (ValidateDataContractsMaskedFieldsRequest) returns (ValidateDataContractsMaskedFieldsResponse);
  rpc SimpleSchemaDryRun (SimpleSchemaDryRunRequest ) returns (SimpleSchemaDryRunResponse);
}

// List Event Contracts, with optional filters. All filters behave as AND conditions. OR is not possible.
message ListDataContractsRequest {
  // The billing_id, used for authentication.
  // If absent, only public Event Contracts can be returned. If present, public and owned private Event Contracts can be returned.
  string billing_id = 1 [deprecated = true, (validate.rules).string = {len: 0, ignore_empty: true}];

  // Filter on a string to do a full-text search.
  string filter = 2;

  // Filter on a given handle.
  string handle = 3;

  // Filter on a given name.
  string name = 4;

  // Filter public/private Event Contracts.
  strmprivacy.api.entities.v1.FilterPublicPrivate public_private = 5;

  // Filter based on labels. It is possible to skip the label value.
  // In that case, the filter only filters on the key.
  repeated strmprivacy.api.entities.v1.Label labels = 7;

  // Filter on domains.
  repeated string domains = 8;

  // Filter on industries.
  repeated string industries = 9;

  string project_id = 10 [(validate.rules).string.uuid = true];
}

message ListDataContractsResponse {
  repeated strmprivacy.api.entities.v1.DataContract data_contracts = 1 [deprecated=true];

  // (-- api-linter: core::0132::response-unknown-fields=disabled
  //     aip.dev/not-precedent: We really need this field because a data-contract is mutable
  // as long as the state is not active --)
  repeated DataContractAndChecksum data_contracts_and_checksums = 2;
  message DataContractAndChecksum {
    strmprivacy.api.entities.v1.DataContract data_contract = 1 [(google.api.field_behavior) = REQUIRED];
    string checksum = 2 [(google.api.field_behavior) = REQUIRED];
  }
}

message GetDataContractRequest {
  string billing_id = 1 [deprecated = true, (validate.rules).string = {len: 0, ignore_empty: true}];
  // Id or Data Contract Ref must be filled. If filled in both, Id takes precedence.
  strmprivacy.api.entities.v1.DataContractRef ref = 2;
  string id = 3;
}

message GetDataContractResponse {
  strmprivacy.api.entities.v1.DataContract data_contract = 1 [(google.api.field_behavior) = REQUIRED];
  string checksum = 2 [(google.api.field_behavior) = REQUIRED];
}

message CreateDataContractRequest {
  string billing_id = 1 [deprecated = true, (validate.rules).string = {len: 0, ignore_empty: true}];
  strmprivacy.api.entities.v1.DataContract data_contract = 2 [(validate.rules).message.required = true];
  string project_id = 3 [(validate.rules).string.uuid = true];
}

message CreateDataContractResponse {
  strmprivacy.api.entities.v1.DataContract data_contract = 1 [(google.api.field_behavior) = REQUIRED];
  string checksum = 2 [(google.api.field_behavior) = REQUIRED];
}

message UpdateDataContractRequest {
  string billing_id = 1 [deprecated = true, (validate.rules).string = {len: 0, ignore_empty: true}];
  strmprivacy.api.entities.v1.DataContract data_contract = 2 [(validate.rules).message.required = true];
  string checksum = 3 [(validate.rules).string.min_len = 1];
  // The fields to update.
  google.protobuf.FieldMask update_mask = 4 [(validate.rules).message.required = true];
  ConsoleWizardStep console_wizard_step = 5;

  enum ConsoleWizardStep {
    CONSOLE_WIZARD_STEP_UNSPECIFIED = 0;
    SCHEMA = 1;
    EVENT_CONTRACT = 2;
    DATA_CONTRACT = 3;
  }
}

message UpdateDataContractResponse {
  strmprivacy.api.entities.v1.DataContract data_contract = 1 [(google.api.field_behavior) = REQUIRED];
  string checksum = 2 [(google.api.field_behavior) = REQUIRED];
}

message ReviewDataContractRequest {
  string billing_id = 1 [deprecated = true, (validate.rules).string = {len: 0, ignore_empty: true}];
  // Id or Data Contract Ref must be filled. If filled in both, Id takes precedence.
  string id = 2;
  entities.v1.DataContractRef data_contract_ref = 3;
  // When empty, no email is sent after putting the data contract into review
  string approver_external_user_id = 4 [(validate.rules).string = {uuid:true, ignore_empty: true}];
}

message ReviewDataContractResponse {
}

message ActivateDataContractRequest {
  string billing_id = 1 [deprecated = true, (validate.rules).string = {len: 0, ignore_empty: true}];
  // Id or Data Contract Ref must be filled. If filled in both, Id takes precedence.
  string id = 2;
  entities.v1.DataContractRef data_contract_ref = 3;
}

message ActivateDataContractResponse {
}

message DeleteDataContractRequest {
  string billing_id = 1 [deprecated = true, (validate.rules).string = {len: 0, ignore_empty: true}];
  // Id or Data Contract Ref must be filled. If filled in both, Id takes precedence.
  string id = 2;
  string project_id = 3 [(validate.rules).string.uuid = true];
  entities.v1.DataContractRef data_contract_ref = 4;
}

message DeleteDataContractResponse {
}

message ArchiveDataContractRequest {
  string billing_id = 1 [deprecated = true, (validate.rules).string = {len: 0, ignore_empty: true}];
  // Id or Data Contract Ref must be filled. If filled in both, Id takes precedence.
  string id = 2;
  entities.v1.DataContractRef data_contract_ref = 3;
}

message ArchiveDataContractResponse {
}

message ValidateDataContractsMaskedFieldsRequest {
  string billing_id = 1 [deprecated = true, (validate.rules).string = {len: 0, ignore_empty: true}];
  entities.v1.MaskedFields masked_fields = 2 [(validate.rules).message.required = true];
}

message ValidateDataContractsMaskedFieldsResponse {
  // any errors. When empty, all ok.
  repeated Error errors = 1;

  message Error {
    // the event contract id that was giving errors
    string id = 1 [(google.api.field_behavior) = REQUIRED];
    // the event contract ref that was giving errors
    entities.v1.DataContractRef data_contract_ref = 2 [(google.api.field_behavior) = REQUIRED];
    // for non field related errors (such as no event contract, or not allowed)
    string message = 3;
    // list of errors per field
    repeated FieldError errors = 4;
    message FieldError {
      string field_pattern = 1;
      string field_type = 2;
      string message = 3;
    }
  }
}

message GetDataContractSchemaCodeRequest {
  string billing_id = 1 [deprecated = true, (validate.rules).string = {len: 0, ignore_empty: true}];
  // Id or Data Contract Ref must be filled. If filled in both Id takes precedence.
  string id = 2;
  // (-- api-linter: core::0143::standardized-codes=disabled
  //     aip.dev/not-precedent: language here is a programming language, not a human spoken language. --)
  // This should be an enum
  string language = 3 [(validate.rules).string = {in: ["java", "typescript", "python", "rust"]}];
  entities.v1.DataContractRef data_contract_ref = 4;
}

message GetDataContractSchemaCodeResponse {
  string filename = 1 [(google.api.field_behavior) = REQUIRED];
  int64 data_size = 2 [(google.api.field_behavior) = REQUIRED];
  bytes data = 3 [(google.api.field_behavior) = REQUIRED];
}

message GetDataContractSchemaDefinitionRequest {
  int32 confluent_id = 1;
  strmprivacy.api.entities.v1.KafkaClusterRef cluster_ref = 2;
}

message GetDataContractSchemaDefinitionResponse {
  string definition = 1 [(google.api.field_behavior) = REQUIRED];
}

message SimpleSchemaDryRunRequest  {
  strmprivacy.api.entities.v1.Schema.SimpleSchemaDefinition simple_schema_definition = 1 [(validate.rules).message.required = true];
}
message SimpleSchemaDryRunResponse {
  strmprivacy.api.entities.v1.Schema.SimpleSchemaDefinition simple_schema_definition = 1 [(google.api.field_behavior) = REQUIRED];
}

syntax = "proto3";

package strmprivacy.api.entities.v1alpha;

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "strmprivacy/api/entities/v1/entities_v1.proto";

option go_package = "github.com/strmprivacy/api-definitions-go/v3/api/entities/v1alpha;entities";
option java_package = "io.strmprivacy.api.entities.v1alpha";
option java_multiple_files = true;

/*
A project plan contains a series of Entry instances, each of which will typically concern one
form question. There is also a `html` entry, that allow you to put anything you want in it. This
allows the person designing the form to add explanatory sections, or headers, or images, or ...

Meta information like name, title and description is that of the associated Project.

NOTE:  these no longer can be templates, and they don't have an `id`, i.e. they don't exist by
themselves, but only in the context of a project.
 */
message ProjectPlan {
  string project_id = 1 [(validate.rules).string = {uuid : true}];
  repeated Entry entries = 2;
}

message FormTemplate {
  string id = 1 [(validate.rules).string.uuid = true];
  // organization unique name
  string name = 2;
  string organization_id = 3 [(validate.rules).string.uuid = true];
  repeated EntryOrFormTemplateId items = 4;
  message EntryOrFormTemplateId {
    oneof part {
      FormTemplateReference form_template = 1;
      Entry entry = 2;
    }
  }

  // This flag means that this form template will be shown when starting a project.
  // The form template should have at least one Entry of type MultipleChoiceItem, where
  // the associated_form_template_id's can be used to build a project plan
  bool is_project_intake = 5;
}

message FormTemplateReference {
  string id = 1 [(validate.rules).string.uuid = true];
  bool render_inline = 2;
}

/* an Entry in a form or ProjectPlan.

An entry has some generic attributes (all the fields above the `oneof item`) and then
one of the various Entry types.

An interesting type is the `html` type that just contains html that will directly be shown in the browser.
This allows us to add arbitrary non-functional parts. The html will have to be sanitized.
 */
message Entry {
  string id = 1 [(validate.rules).string = {uuid: true, ignore_empty: true}];
  // the name of an entry, just a human readable reference to be rendered
  string name = 2 [(validate.rules).string = {ignore_empty: true, max_len: 100}];
  // the content of an entry; the question to be asked, the task to be completed, ...
  string content = 3 [(validate.rules).string = {ignore_empty: true, max_len: 5000}];
  // when was the entry created
  google.protobuf.Timestamp creation_time = 4;
  // when is the entry due to be filled in
  google.protobuf.Timestamp due_time = 5;
  // when was the entry filled in.
  google.protobuf.Timestamp completion_time = 6;
  // The user that created this item, retrieved from the JWT token.
  entities.v1.User creator = 7;
  // The user that is assigned to this item.
  entities.v1.User assignee = 8;
  // help text describing the item. Might give an example response for instance.
  string help_text = 9;
  // generic remark to be filled in by a user.
  string remark = 10;
  // whether or not the user can delete an item.
  bool can_be_deleted = 11;

  // renders a header of a certain type of item.
  // this might involve adding a <table> element in html
  // this creates a sort of section which will be closed when one of the following occurs
  // * an entry of a different type is the next to be processed
  // * we encounter another render_header entry.
  // * we just rendered the last Entry in the list
  string form_template_id = 12 [(validate.rules).string = {uuid: true, ignore_empty: true}];

  oneof item {
    option (validate.required) = true;
    Task task = 13;
    DataContract data_contract = 14;
    Document document = 15;
    Pipeline pipeline = 16;
    Question question = 17;
    MultipleChoiceItem choices = 18;
    string html = 19;
    // special kind of item that opens a new element that is being rendered.
    SectionOpen section_open = 20;
    // special kind of item that closes the current element that is being rendered.
    SectionClose section_close = 21;
    AddOneEntry add_one_entry = 109;
  }

  // special kind of entry that renders a user-interface element, that when
  // activated will create an entry of a certain type just above this entry.
  message AddOneEntry {
    oneof type {
      option (validate.required) = true;
      Task task = 1;
      DataContractNewEntry data_contract = 2;
      Document document = 3;
      PipelineNewEntry pipeline = 4;
      Question question = 5;
      MultipleChoiceItem choices = 6;
      string html = 7;
    }
  }

  message Task {
    // If the completion date is 0, then the todo is not done yet.
  }

  message DataContract {
    // Data Contract details can be retrieved through the Data Contract API.
    entities.v1.DataContractRef ref = 2 [(validate.rules).message.required = true];
  }

  message DataContractNewEntry {}

  message Document {
    // Filename should be unique within the project.
    string filename = 2;
    // If the URI is set, then the document originates from an external source.
    string uri = 3;
  }
  message Pipeline {
    oneof pipeline {
      entities.v1.StreamRef stream = 2;
      entities.v1.BatchJobRef batch_job = 3;
    }
  }

  message PipelineNewEntry {
    oneof pipeline {
      StreamNewEntry stream = 2;
      BatchJobNewEntry batch_job = 3;
    }
  }

  message StreamNewEntry {}
  message BatchJobNewEntry {}

  message Question {
    // the question is the `content` field
    repeated AnswerAndLabel answers_and_labels = 1;
    message AnswerAndLabel {
      string answer = 1;
      string label = 2;
    }
  }

  message MultipleChoiceItem {
    string text = 1;
    // the choices are what gets rendered
    repeated string choices = 2;
    // the weights are a 1 to 1 mapping on the choices, i.e. choice[2] corresponds to weight[2]
    repeated float weights = 3;
    // answers contain the zero-based index(es) to the choice(s) selected by the user.
    repeated int32 answers = 4;
    // Style determines both the type of rendering, and whether or not multiple answers might be given
    Style style = 5;
    // in case of a project-intake template, these point to associated form template id's that
    // will be used to build a ProjectPlan by an on-the fly chaining of the forms that were checked.
    // For most entries, this field will be empty, but for project intake form templates, it should have the same
    // number of entries as the choices!
    repeated string associated_form_template_id = 6 [(validate.rules).repeated = {items: {string: {uuid: true}}}];
    enum Style {
      STYLE_UNSPECIFIED = 0;
      // multiple answers allowed
      CHECKBOX = 1;
      // single answer
      DROPDOWN = 2;
      // single answer
      RADIO = 3;
    }
  }

  message RiskAssessmentItem  {
    string risk = 2;
    string harm_likelihood = 3;
    string harm_severity = 4;
    string overall_risk = 5;
  }

  message RiskMitigationItem  {
    string risk = 2;
    string overall_risk = 3;
    string mitigation_measure = 5;
    string residual_risk = 6;
    string approval = 7;
  }

  message RecordingItem  {
    string particular = 2;
    string remarks = 4;
  }

  message SectionOpen {
    bool render_inline = 1;
  }

  message SectionClose {}
}

message ContactDetails {
  ContactType type = 1;
  // The type of contact in case OTHER was selected.
  string other_type = 2;
  string name = 3;
  string address = 4;
  string email = 5;
  string phone = 6;

  enum ContactType {
    CONTACT_TYPE_UNSPECIFIED = 0;
    PRIMARY = 1;
    REPRESENTATIVE = 2;
    DATA_PROTECTION_OFFICER = 3;
    OTHER = 4;
  }
}

// A party is a (legal) entity that is involved in the processing of data in some way.
// It can be an organization, but also a person, a department, a team, etc.
message Party {
  string id = 1 [(validate.rules).string = {uuid: true, ignore_empty: true}];
  // Whether this is an external party or not.
  bool external = 2;
  string name = 3;
  // Two-letter region code as mandated by the AIP https://google.aip.dev/143#countries-and-regions
  string region_code = 4 [(validate.rules).string = {len: 2, ignore_empty: true}];
  repeated ContactDetails contact_details = 5;
  google.protobuf.Timestamp update_time = 6;

  // This is only relevant within the scope of a ROPA record, following from the relation of this party to that record.
  enum RelationType {
    RELATION_TYPE_UNSPECIFIED = 0;
    CONTROLLER = 1;
    PROCESSOR = 2;
    RECIPIENT = 3;
  }

  // Just a wrapper around a list of parties, used in the multi-maps in the ROPA record.
  message List {
    repeated Party parties = 1;
  }
}

// Categories are pretty arbitrary classifications, but always have a specific type.
// Their names are unique within a type. Names can be reused across types.
message Category {
  string id = 1 [(validate.rules).string = {uuid: true, ignore_empty: true}];
  string name = 2;
  Type type = 3;
  google.protobuf.Timestamp update_time = 4;

  enum Type {
    TYPE_UNSPECIFIED = 0;
    DATA = 1;
    DATA_SUBJECT = 2;
    DATA_RECIPIENT = 3;
    DATA_ASSET = 4;
    PERSONAL_DATA = 5;
    PROCESSING = 6;
    SECURITY_MEASURE = 7;
  }

  // Just a wrapper around a list of categories, used in the multi-maps in the ROPA record.
  message List {
    repeated Category categories = 1;
  }
}

message DataAsset {
  string id = 1 [(validate.rules).string = {uuid: true, ignore_empty: true}];
  string name = 2;
  // These are categories of type DATA_ASSET.
  repeated Category categories = 3;
  Party hosting_party = 4;
  // Contact person at hosting party, details should be in the party record.
  string contact_person_name = 5;
  // Two-letter region code as mandated by the AIP https://google.aip.dev/143#countries-and-regions
  string region_code = 6 [(validate.rules).string = {len: 2, ignore_empty: true}];
  google.protobuf.Timestamp update_time = 7;

  // This is only relevant within the scope of a ROPA record, following from the relation of this data asset to that record.
  enum RelationType {
    RELATION_TYPE_UNSPECIFIED = 0;
    DATA_SOURCE = 1;
  }

  // Just a wrapper around a list of data assets, used in the multi-maps in the ROPA record.
  message List {
    repeated DataAsset data_assets = 1;
  }
}

// A continuous collection of all first and third party data processing activities
// of an organization. It is a "living document" that should be updated constantly as things change.
// It is not a snapshot but a dynamic collection of the processing activities that at any time
// reflects the current state of the data processing activities.
// When a ROPA is requested for an audit, the auditor would normally expect the most recent version
// that reflects the current activities, not a historical log of all previous versions or changes.
// But this does not mean that the history of certain data processing activities can be ignored.
// For example, if data has been transferred or shared, or if incidents (hack / leak of certain data
// or whatever) have occurred, this should be reflected in the version history of individual ROPA records.
message Ropa {
  // The STRM organization ID this ROPA is for.
  string organization_id = 1 [(validate.rules).string = {uuid: true, ignore_empty: true}];
  repeated Record records = 2;

  message Record {
    string id = 1 [(validate.rules).string = {uuid: true, ignore_empty: true}];
    // The ID of the STRM organization this record belongs to.
    string organization_id = 2 [(validate.rules).string = {uuid: true, ignore_empty: true}];
    string name = 3;
    google.protobuf.Timestamp update_time = 4;
    entities.v1.User update_user = 5;
    int32 version = 6;

    // Related parties, grouped by Party.RelationType, e.g. CONTROLLER, PROCESSOR, RECIPIENT.
    map<string, Party.List> parties = 7;

    // Purpose levels as defined in the organizations Purpose Map.
    repeated int32 purpose_levels = 8;

    // Related categories, grouped by their type, e.g. DATA_SUBJECT, PROCESSING.
    // Some may be derived from the data contract.
    map<string, Category.List> categories = 9;

    // Linked data contract(s), if applicable, can change over time.
    repeated string data_contract_ids = 10;

    // Data assets, grouped by DataAsset.RelationType, e.g. DATA_SOURCE.
    map<string, DataAsset.List> data_assets = 11;

    // Data transfer details.
    string data_transfer_details = 12;

    // Data retention policies, references policies in the organization's policy list.
    repeated string data_retention_policy_ids = 13;

    // Additional information, free format.
    string additional_info = 14;
  }
}

syntax = "proto3";

package strmprivacy.api.entities.v1alpha;

import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "strmprivacy/api/entities/v1/entities_v1.proto";

option go_package = "github.com/strmprivacy/api-definitions-go/v3/api/entities/v1alpha;entities";
option java_package = "io.strmprivacy.api.entities.v1alpha";
option java_multiple_files = true;

message ProjectPlan {
  string project_id = 1;
  // If title is empty, the project name from the project message can be used.
  string title = 2 [(validate.rules).string = {ignore_empty: true, min_len: 1, max_len: 300}];
  string description = 3 [(validate.rules).string = {ignore_empty: true, max_len: 5000}];
  repeated ItemGroup item_groups = 4;
  repeated entities.v1.User users = 5;
  // is this instance actually a template, i.e. without filled in values.
  bool is_template = 6;
  // the id of the project plan, never null
  string id = 7 [(validate.rules).string.uuid = true];
}

message ItemGroup {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 100}];
  string description = 2 [(validate.rules).string = {ignore_empty: true, max_len: 5000}];
  oneof items {
    option (validate.required) = true;

    TodoItems todo_items = 4;
    DataContractItems data_contract_items = 5;
    InfoAssetItems info_asset_items = 6;
    DocumentItems document_items = 7;
    PipelineItems pipeline_items = 8;
    FreeformItems freeform_items = 10;
    RiskAssessmentItems risk_assessment_items = 11;
    RiskMitigationItems risk_mitigation_items = 12;
    RecordingItems recording_items = 13;
  }
  string id = 9 [(validate.rules).string = {uuid: true, ignore_empty: true}];
}

message ItemProperties {
  string id = 1 [(validate.rules).string = {uuid: true, ignore_empty: true}];
  google.protobuf.Timestamp creation_time = 2;
  google.protobuf.Timestamp due_time = 3;
  google.protobuf.Timestamp completion_time = 4;
  // The user that created this item, retrieved from the JWT token.
  entities.v1.User creator = 5;
  // The user that is assigned to this item.
  entities.v1.User assignee = 6;
  // help text describing the item. Might give an example response for instance.
  string help_text = 7;
}

message TodoItems {
  repeated TodoItem items = 2;

  message TodoItem {
    ItemProperties item_properties = 1;
    // If the completion date is 0, then the todo is not done yet.
    string description = 2 [(validate.rules).string = {max_len: 5000}];
  }
}

message DataContractItems {
  repeated DataContractItem items = 1;

  message DataContractItem {
    ItemProperties item_properties = 1;
    // Data Contract details can be retrieved through the Data Contract API.
    entities.v1.DataContractRef ref = 2 [(validate.rules).message.required = true];
  }
}

message InfoAssetItems {
  repeated InfoAssetItem items = 1;

  message InfoAssetItem {
    ItemProperties item_properties = 1;
    string name = 2 [(validate.rules).string = {max_len: 300}];
    State state = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
    Classification classification = 4;
    InfoAsset info_asset = 5;

    enum State {
      STATE_UNSPECIFIED = 0;
      DRAFT = 1;
      IN_REVIEW = 2;
      APPROVED = 3;
    }

    // TODO is the name correct? Could also be SensitivityClassification or RiskClassification.
    // TODO is points a part of the classification or a separate field?
    message Classification {
      string name = 1 [(validate.rules).string = {max_len: 300}];
      string color_css = 2;
      // The sensitivity points of the information asset (higher is more sensitive)
      int32 points = 4;
    }
  }
}

message DocumentItems {
  repeated DocumentItem items = 1;

  message DocumentItem {
    ItemProperties item_properties = 1;
    // Filename should be unique within the project.
    string filename = 2;
    // If the URI is set, then the document originates from an external source.
    string uri = 3;
  }
}

message PipelineItems {
  repeated PipelineItem items = 2;

  message PipelineItem {
    ItemProperties item_properties = 1;
    oneof pipeline {
      option (validate.required) = true;
      entities.v1.StreamRef stream = 2;
      entities.v1.BatchJobRef batch_job = 3;
    }
  }
}

message FreeformItems {
  repeated Item items = 2;
  message Item {
    ItemProperties item_properties = 1;
    string question = 2;
    string answer = 3;
    string remark = 4;
  }
}

message RiskAssessmentItems {
  repeated Item items = 2;
  message Item {
    ItemProperties item_properties = 1;
    string risk = 2;
    string harm_likelihood = 3;
    string harm_severity = 4;
    string overall_risk = 5;
  }
}

message RiskMitigationItems {
  repeated Item items = 2;
  message Item {
    ItemProperties item_properties = 1;
    string risk = 2;
    string overall_risk = 3;
    string mitigation_measure = 5;
    string residual_risk = 6;
    string approval = 7;
  }
}

message RecordingItems {
  repeated Item items = 2;
  message Item {
    ItemProperties item_properties = 1;
    string particular = 2;
    string remarks = 4;
  }
}

message InfoAsset {
  string template = 1;
  string name = 2;
  bool embargo = 3;
  repeated BusinessImpactRating business_impacts = 4;

  repeated string security_levels = 5;
  string security_level = 6;

  repeated Section sections = 7;

  // is this instance actually a template, i.e. without filled in values.
  bool is_template = 8;


  message Section {
    // Business consequences for instance
    string name = 1;
    repeated SubSection sub_sections = 2;
  }
  message SubSection {
    // 'Impact on core business' for instance
    string name = 1;
    string description = 2;
    string explanation = 3;
    repeated Check checks = 4;
  }
  message Check {
    string name = 1;
    string detail_info = 2;
    bool  checked = 3;
  }
  message BusinessImpactRating {
    string label = 1;
    BusinessImpactCategory category = 2;
  }
  message BusinessImpactCategory {
    string name = 1;
    string description = 2;
    float value = 3;
  }
}

message ContactDetails {
  ContactType type = 1;
  // The type of contact in case OTHER was selected.
  string other_type = 2;
  string name = 3;
  string address = 4;
  string email = 5;
  string phone = 6;

  enum ContactType {
    CONTACT_TYPE_UNSPECIFIED = 0;
    PRIMARY = 1;
    REPRESENTATIVE = 2;
    DATA_PROTECTION_OFFICER = 3;
    OTHER = 4;
  }
}

// A party is a (legal) entity that is involved in the processing of data in some way.
// It can be an organization, but also a person, a department, a team, etc.
message Party {
  string id = 1 [(validate.rules).string = {uuid: true, ignore_empty: true}];
  // Whether this is an external party or not.
  bool external = 2;
  string name = 3;
  // Two-letter region code as mandated by the AIP https://google.aip.dev/143#countries-and-regions
  string region_code = 4 [(validate.rules).string = {len: 2, ignore_empty: true}];
  repeated ContactDetails contact_details = 5;
  google.protobuf.Timestamp update_time = 6;

  // This is only relevant within the scope of a ROPA record, following from the relation of this party to that record.
  enum RelationType {
    RELATION_TYPE_UNSPECIFIED = 0;
    CONTROLLER = 1;
    PROCESSOR = 2;
    RECIPIENT = 3;
  }

  // Just a wrapper around a list of parties, used in the multi-maps in the ROPA record.
  message List {
    repeated Party parties = 1;
  }
}

// Categories are pretty arbitrary classifications, but always have a specific type.
// Their names are unique within a type. Names can be reused across types.
message Category {
  string id = 1 [(validate.rules).string = {uuid: true, ignore_empty: true}];
  string name = 2;
  Type type = 3;
  google.protobuf.Timestamp update_time = 4;

  enum Type {
    TYPE_UNSPECIFIED = 0;
    DATA = 1;
    DATA_SUBJECT = 2;
    DATA_RECIPIENT = 3;
    DATA_ASSET = 4;
    PERSONAL_DATA = 5;
    PROCESSING = 6;
    SECURITY_MEASURE = 7;
  }

  // Just a wrapper around a list of categories, used in the multi-maps in the ROPA record.
  message List {
    repeated Category categories = 1;
  }
}

message DataAsset {
  string id = 1 [(validate.rules).string = {uuid: true, ignore_empty: true}];
  string name = 2;
  // These are categories of type DATA_ASSET.
  repeated Category categories = 3;
  Party hosting_party = 4;
  // Contact person at hosting party, details should be in the party record.
  string contact_person_name = 5;
  // Two-letter region code as mandated by the AIP https://google.aip.dev/143#countries-and-regions
  string region_code = 6 [(validate.rules).string = {len: 2, ignore_empty: true}];
  google.protobuf.Timestamp update_time = 7;

  // This is only relevant within the scope of a ROPA record, following from the relation of this data asset to that record.
  enum RelationType {
    RELATION_TYPE_UNSPECIFIED = 0;
    DATA_SOURCE = 1;
  }

  // Just a wrapper around a list of data assets, used in the multi-maps in the ROPA record.
  message List {
    repeated DataAsset data_assets = 1;
  }
}

// A continuous collection of all first and third party data processing activities
// of an organization. It is a "living document" that should be updated constantly as things change.
// It is not a snapshot but a dynamic collection of the processing activities that at any time
// reflects the current state of the data processing activities.
// When a ROPA is requested for an audit, the auditor would normally expect the most recent version
// that reflects the current activities, not a historical log of all previous versions or changes.
// But this does not mean that the history of certain data processing activities can be ignored.
// For example, if data has been transferred or shared, or if incidents (hack / leak of certain data
// or whatever) have occurred, this should be reflected in the version history of individual ROPA records.
message Ropa {
  // The STRM organization ID this ROPA is for.
  string organization_id = 1 [(validate.rules).string = {uuid: true, ignore_empty: true}];
  repeated Record records = 2;

  message Record {
    string id = 1 [(validate.rules).string = {uuid: true, ignore_empty: true}];
    // The ID of the STRM organization this record belongs to.
    string organization_id = 2 [(validate.rules).string = {uuid: true, ignore_empty: true}];
    string name = 3;
    google.protobuf.Timestamp update_time = 4;
    entities.v1.User update_user = 5;
    int32 version = 6;

    // Related parties, grouped by Party.RelationType, e.g. CONTROLLER, PROCESSOR, RECIPIENT.
    map<string, Party.List> parties = 7;

    // Purpose levels as defined in the organizations Purpose Map.
    repeated int32 purpose_levels = 8;

    // Related categories, grouped by their type, e.g. DATA_SUBJECT, PROCESSING.
    // Some may be derived from the data contract.
    map<string, Category.List> categories = 9;

    // Linked data contract(s), if applicable, can change over time.
    repeated string data_contract_ids = 10;

    // Data assets, grouped by DataAsset.RelationType, e.g. DATA_SOURCE.
    map<string, DataAsset.List> data_assets = 11;

    // Data transfer details.
    string data_transfer_details = 12;

    // Data retention policies, references policies in the organization's policy list.
    repeated string data_retention_policy_ids = 13;

    // Additional information, free format.
    string additional_info = 14;
  }
}

syntax = "proto3";

package strmprivacy.api.data_subjects.v1;

import "google/api/field_behavior.proto";
import "strmprivacy/api/entities/v1/entities_v1.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/strmprivacy/api-definitions-go/v2/api/data_subjects/v1;data_subjects";
option java_package = "io.strmprivacy.api.data_subjects.v1";
option java_multiple_files = true;

service DataSubjectsService {
  /**
  Retrieve all key links associated with certain data subject(s)

  returns: a list of data subject with their associated key links and their
  expiry.
   */
  rpc ListDataSubjectKeylinks (ListDataSubjectKeylinksRequest) returns (ListDataSubjectKeylinksResponse);

  /** called by an entity that can create key link(s) like the event-gateway or a batch-job

  typically (but not necessarily) only one key link is added at the same time.

  The list of DatasubjectKeylinks is combined with a project_id; the DSS uses this to find the linked
  organization_id
   */
  rpc AddDataSubjectsKeyLinks(AddDataSubjectsKeyLinksRequest) returns (AddDataSubjectsKeyLinksResponse);

  /**
  delete data subjects from the DSS database, and returns the deleted key links and timestamps
   */
  rpc DeleteDataSubjects(DeleteDataSubjectsRequest) returns (DeleteDataSubjectsResponse);
}

message ListDataSubjectKeylinksRequest {
  repeated string data_subject_id = 1;
  // this parameter is filled in in the management-api from the identity of the caller
  // it must be empty when a call is made to the management-api.
  string organization_id = 2;
}

message ListDataSubjectKeylinksResponse {
  repeated DatasubjectKeylinks data_subject_keylinks = 1;
}

message AddDataSubjectsKeyLinksRequest {
  // this parameter is filled in in the management-api from the identity of the caller
  // it must be empty when a call is made to the management-api.
  string project_id = 1 [(google.api.field_behavior) = REQUIRED];
  repeated DatasubjectKeylinks data_subject_keylinks = 2;
}

message AddDataSubjectsKeyLinksResponse {

  int64 stored_count = 1;
  repeated AddDataSubjectsIssues issues = 2;

  /**
  this list is empty when nothing has gone wrong.
  issue_type are currently:

  DuplicateKey: (when you have the same project/data_subject/keylink tuple). Harmless
  InvalidArgument: when you have a project_id or key_link that is not a uuid
   */
  message AddDataSubjectsIssues  {
    string data_subject_id = 1;
    string key_link = 2;
    string message = 3;
    string issue_type = 4;
  }
}

/** one data subject 0 or more key links, each of which could have
been used to encrypt data up to a certain point in time.
*/
message DatasubjectKeylinks {
  string data_subject_id = 1 [(google.api.field_behavior) = REQUIRED];
  repeated KeylinkAndTimestamp keylinks_and_timestamps = 2;
  message KeylinkAndTimestamp  {
    string key_link = 1;
    google.protobuf.Timestamp expiry_time = 2;
  }
}

message DeleteDataSubjectsRequest {
  repeated string data_subjects = 1;
  // this parameter is filled in in the management-api from the identity of the caller
  // it must be empty when a call is made to the management-api.
  string organization_id = 2;

}

message DeleteDataSubjectsResponse {
  int64 deleted_keylinks_count = 1;
}

syntax = "proto3";

package strmprivacy.api.organizations.v1;

import "strmprivacy/api/entities/v1/entities_v1.proto";
import "validate/validate.proto";

option go_package = "github.com/strmprivacy/api-definitions-go/v2/api/organizations/v1;organizations";
option java_package = "io.strmprivacy.api.organizations.v1";
option java_multiple_files = true;

service OrganizationsService {
  rpc InviteUsers (InviteUsersRequest) returns (InviteUsersResponse);
  rpc UpdateUserRoles (UpdateUserRolesRequest) returns (UpdateUserRolesResponse);
  rpc GetUser (GetUserRequest) returns (GetUserResponse);
  rpc ListOrganizationMembers (ListOrganizationMembersRequest) returns (ListOrganizationMembersResponse);
}

message InviteUsersRequest {
  // Max invites is also enforced in backend
  repeated UserInvite user_invites = 1 [(validate.rules).repeated = {min_items: 1, max_items : 500}];
  // This parameter is filled in by the management-api gateway from the identity of the caller.
  // It must be empty when a call is made to the management-api.
  string organization_id = 2 [(validate.rules).string = {uuid: true, ignore_empty: true}];
}

message UserInvite {
  string email = 1 [(validate.rules).string = {email: true}];
}

message InviteUsersResponse {
  int64 invite_count = 1;
  repeated UserInviteIssue issues = 2;

  message UserInviteIssue {
    UserInvite invite = 1 [(validate.rules).message.required = true];
    string message = 2;
  }
}

// (-- api-linter: core::0134::request-mask-required=disabled
//     aip.dev/not-precedent: We will not be using the update field mask. --)
message UpdateUserRolesRequest {
  // All users get all defined roles
  repeated string emails = 1 [(validate.rules).repeated = {items: {string: {email: true}}, min_items: 1}];
  // If no user roles are defined, user will always default to MEMBER
  repeated strmprivacy.api.entities.v1.UserRole user_roles = 2;
}

message UpdateUserRolesResponse {}

message ListOrganizationMembersRequest {}

message ListOrganizationMembersResponse {
  repeated strmprivacy.api.entities.v1.User organization_members = 1;
}

message GetUserRequest {
  string email = 1 [(validate.rules).string = {email: true}];
}

message GetUserResponse {
  strmprivacy.api.entities.v1.User user = 1;
}

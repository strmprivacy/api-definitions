syntax = "proto3";
package io.streammachine.api.entities.v1;
option go_package = "streammachine.io/api/entities/v1;entities";

option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// See our attribute spreadsheet for the initial fields version
// https://docs.google.com/spreadsheets/d/12dooxWXRQjEKhZxS_Bpa4fXpDpaEbPu9JorxOo_BElQ

/*
  Streams are source or derived streams depending on whether or not linked_stream is null.
  Key streams are a separate entity in the api.
 */
message Stream {
  // -- TODO: I think we should use StreamRef here instead of these 2 properties (billing_id + name) --
  // -- TODO add field_behavior for all non-optional fields
  string billing_id = 1 ;
  string name = 2;
  string description = 3; // customer purpose.
  repeated int32 consent_levels = 4; // consent levels for derived streams
  ConsentLevelType consent_level_type = 5; // how event consent-levels are interpreted by decrypters.
  bool enabled = 6; // whether or not this stream is enabled.
  float rate_limit = 7; // filled in from customer profile
  int64 event_ct_limit = 8; // filled in from customer profile
  string linked_stream = 9; // null for source streams
  repeated string tags = 10; // customer purposes.
  string status = 11; // engineering status message. Add enum when we know more.
  repeated Credentials credentials = 12;
}

/*
Consent level is meant to interpret the consent-levels of an event for decryption purposes only.

Cumulative means that the highest consent-level in an event must be greater than or equal to the single requested level
for the decrypted stream.

Granular means that the set of consent-levels in an event must enclose the set of requested event levels for the
decrypted stream.
 */
enum ConsentLevelType {
  CONSENT_LEVEL_TYPE_UNSPECIFIED = 0;
  CUMULATIVE = 1;
  GRANULAR = 2;
}

/*
A Stream of key-link, encryption-key messages created from a source stream
with the same `name`.
 * -- TODO should key stream be a separate resource? --
 * -- TODO key stream (also on SOS database level) should be named export_keys, which is a property on a Stream (a source stream)?
 */
message KeyStream {
  string billing_id = 1;
  string name = 2; // identical to the source stream
  string status = 5;
}

/* refers to a stream or key stream.
 */
message StreamRef  {
  string billing_id = 1;
  string stream_name = 2;
  // TODO: Can't we do this in another way than with a boolean flag?
  bool key_stream = 3; // whether we refer to the source stream or its corresponding keys stream.
}

/*
Credentials to produce to the event-gateway, or to consume from egress.
 */
message Credentials {
  string billing_id = 1;
  string client_id = 2;
  /* as this property is secret, it is not always returned */
  string client_secret = 3;
}

/* the sink configuration used by the batch exporters. */
message Sink {
  string billing_id = 1;
  string name = 2;
  SinkType sink_type = 3;
  string bucket_name = 4;
  // The credentials that are to be used to access the sink target (e.g. S3 or Google Cloud Storage)
  string credentials = 5;
}

enum SinkType {
  SINK_TYPE_UNSPECIFIED = 0;
  S3 = 1;
  GCLOUD = 2;
}

/*
A batch exporter.
 */
message BatchExporter {
  string billing_id = 1;
  string name = 2;
  StreamRef stream_ref = 3;
  google.protobuf.Duration interval = 4; // granularity of seconds, nanos is unused
  string sink_name = 5;
  string path_prefix = 6;
}

/*
Currently only our internal shared export cluster.
 */
message KafkaCluster {
  KafkaClusterRef ref = 1;
  string bootstrap_servers = 2;
  AuthMechanism auth_mechanism = 3;
  string token_uri = 4;
  bool owned = 5; // TODO define what this means
}

/*
How to refer to a certain Kafka cluster.
 */
message KafkaClusterRef {
  string billing_id = 1; // streammachine
  string name = 2; // shared export
}

// -- TODO align values with JAAS. see https://docs.confluent.io/platform/current/kafka/overview-authentication-methods.html --
// -- also see the Kafka exporter to determine the correct terminology here --
// -- SASL_SSL should probably be SASL_OAUTHBEARER --
enum AuthMechanism {
  AUTH_MECHANISM_UNSPECIFIED = 0;
  SASL_PLAIN = 1;
  SASL_SSL = 2;
}

message KafkaExporter  {
  string name = 1; // typically default  <cluster-name>-<stream-name>
  StreamRef stream_ref = 2; // what stream
  KafkaClusterRef cluster_ref = 3; // what cluster to produce to.
  string produce_to_topic = 4; // the topic this exporter produces to
  string client_id = 5; // how to produce to the cluster.
  string client_secret = 6; // how to produce to the cluster.
  repeated KafkaUser users = 7;
}

/*
User credentials to consume from topic produced by Kafka Exporter.

The kafka exporter is linked to a certain cluster, so this entity is bound to a certain
kafka cluster.
 */
message KafkaUser {
  string billing_id = 1;
  string name = 2;
  string kafka_exporter_name = 3;
  string topic = 4;
  string client_id = 5;
  string client_secret = 6;
  // -- TODO should we even include this in our api at the moment? What is the probability of a customer wanting to cross produce to another customer's cluster? --
  string cluster_billing_id = 7;
  string cluster_name = 8;
  string stream_name = 9;
}

/*
for descriptive purposes only.
 */
message ConsentLevelMapping {
  string billing_id = 1;
  string name = 2; // some text like 'analytics'
  int32 value = 3; // the typically small integer value that we use in the events.
}

message WindowedEventCount {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
  int64 event_count = 3;
}

message SchemaRef {
  string handle = 1;
  string name = 2;
  string version = 3;
}

enum Status {
  STATUS_UNSPECIFIED = 0;
  PENDING = 1;
  IN_REVIEW = 2;
  REJECTED = 3;
  ACTIVE = 4;
  DELETED = 5;
}

message Schema {
  SchemaRef ref = 1;
  SchemaType type = 2;
  bool is_public = 3; // -- 'is' is intentional here (see https://google.aip.dev/140#booleans) --
  string definition = 4;
  Status status = 5;
}

enum SchemaType {
  SCHEMA_TYPE_UNSPECIFIED = 0 ;
  AVRO = 1;
  JSONSCHEMA = 2;
}

message EventContractRef {
  string handle = 1;
  string name = 2;
  string version = 3;
}

message EventContract {
  EventContractRef ref = 1;
  Status status = 2;
  SchemaRef schema_ref = 3;
  bool is_public = 4; // -- 'is' is intentional here (see https://google.aip.dev/140#booleans) --
  string key_field = 5;
  map<string, int32> pii_fields = 6;
  repeated Validation validations = 7;
}

message Validation {
  string field = 1;
  string type = 2;
  string value = 3;
}

message StreamTree {
  Stream stream = 1;
  KeyStream key_stream = 2;
  repeated Stream derived = 3;
  repeated BatchExporter batch_exporters = 4;
  repeated KafkaExporter kafka_exporters = 5;
}

message SinkTree {
  Sink sink = 1;
  repeated BatchExporter batch_exporters = 2;
}

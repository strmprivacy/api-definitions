syntax = "proto3";

package io.streammachine.api.kafka_users.v1;

import "io/streammachine/api/entities/v1/entities_v1.proto";
import "google/api/field_behavior.proto";

option go_package = "streammachine.io/api/kafka_users/v1;kafka_users";
option java_multiple_files = true;

service KafkaUsersService {
  rpc ListKafkaUsers (ListKafkaUsersRequest) returns (ListKafkaUsersResponse);
  rpc GetKafkaUser (GetKafkaUserRequest) returns (GetKafkaUserResponse);
  rpc DeleteKafkaUser (DeleteKafkaUserRequest) returns (DeleteKafkaUserResponse);
  rpc CreateKafkaUser (CreateKafkaUserRequest) returns (CreateKafkaUserResponse);
}

message ListKafkaUsersRequest {
  // (-- api-linter: core::0122::name-suffix=disabled
  //     aip.dev/not-precedent: Stream name is a better name than stream --)
  string stream_name = 1;
}

message ListKafkaUsersResponse {
  repeated io.streammachine.api.entities.v1.KafkaUser kafka_users = 1;
}

message DeleteKafkaUserRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteKafkaUserResponse {
}

message CreateKafkaUserRequest {
  // not all fields are used, and if you fill them in, they might be overwritten
  // by the api gateway (like status, the limits etc...)
  io.streammachine.api.entities.v1.KafkaUser kafka_user = 1;
}

message CreateKafkaUserResponse {
  io.streammachine.api.entities.v1.KafkaUser kafka_user = 1;
}

message GetKafkaUserRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetKafkaUserResponse {
  io.streammachine.api.entities.v1.KafkaUser kafka_user = 1;
}

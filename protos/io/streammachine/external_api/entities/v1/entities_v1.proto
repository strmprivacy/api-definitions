syntax = "proto3";
package io.streammachine.external_api.entities.v1;
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";

// See our attribute spreadsheet for the initial fields version
// https://docs.google.com/spreadsheets/d/12dooxWXRQjEKhZxS_Bpa4fXpDpaEbPu9JorxOo_BElQ

message Stream {
  string billing_id = 1;
  string name = 2;
  string description = 3;
  repeated int32 consent_levels = 4;
  ConsentLevelType consent_level_type = 5;
  bool enabled = 6 ; // TODO default is false ?
  float rate_limit=7;
  int64 event_ct_limit = 8;
  string linked_stream = 9;
  repeated string tags = 10;
  string status = 11;
}

enum ConsentLevelType {
  CONSENT_LEVEL_TYPE_UNSPECIFIED=0;
  CONSENT_LEVEL_TYPE_CUMULATIVE = 1;
  CONSENT_LEVEL_TYPE_GRANULAR = 2;
}

message KeyStream {
  string billing_id = 1;
  string name = 2;
  bool enabled = 3;
  string source_stream = 4;
  string status = 5;
}

message Credentials {
  string billing_id = 1;
  string client_id = 2;
  string stream_name = 3;
  // whether or not these credentials are on a stream or a key-stream
  bool key_stream = 4;
  string client_secret = 5;
}

message Sink {
  string billing_id = 1;
  string name = 2;
  SinkType sink_type = 3;
  string bucket_name = 4;
  string credentials = 5;
}

enum SinkType {
  SINK_TYPE_UNSPECIFIED  = 0;
  SINK_TYPE_S3  = 1;
  SINK_TYPE_GCLOUD=2;
  SINK_TYPE_AZURE=3;
  SINK_TYPE_MONGO=4;
  SINK_TYPE_ELASTIC=5;
}

message BatchExporter {
  string billing_id = 1;
  string name = 2;
  int32 interval = 3 ; // interval in seconds
  string sink_name = 4;
  string path_prefix = 5;
}

message KafkaCluster {
  string billing_id = 1;
  string name = 2;
  string bootstrap_servers = 3;
  AuthMechanism auth_mechanism = 4;
  string token_uri = 5;
}

enum AuthMechanism {
  // TODO values
  AUTH_MECHANISM_UNSPECIFIED  = 0;
  AUTH_MECHANISM_PLAINTEXT = 1;
  AUTH_MECHANISM_SASL = 2;
  AUTH_MECHANISM_TLS = 3;
}

message KafkaExporter  {
  string billing_id = 1;
  string name = 2;
  string stream_name = 3;
  string key_stream = 4;
  string cluster_name = 5;
  string cluster_billing_id =  6;
  string produce_to_topic = 7;
  string client_id  = 8;
  string client_secret  = 9;
}

message KafkaUser {
  string billing_id = 1;
  string name = 2;
  string kafka_exporter_name = 3;
  string consume_from_topic=4;
  string client_id = 5;
  string client_secret = 6;
}

message ConsentLevel {
  string billing_id = 1;
  string name = 2;
  int32 value = 3;
  string dpo_reference=4;
}

message Events {
  string billing_id = 1;
  repeated EventsInfo event_infos = 3;
}

message EventsInfo {
  google.protobuf.Timestamp t0 = 1;
  int32 duration_s = 2;
  string stream_name = 3;
  int64 count = 4;
}

message Schema {
  string billing_id = 1;
  string handle = 2;
  string name = 3;
  string version = 4;
  SchemaType type = 5;
  string definition = 6;
  string status_message = 7;
  Status status = 8;
}

enum SchemaType {
  SCHEMA_TYPE_UNSPECIFIED = 0 ;
  SCHEMA_TYPE_AVRO=1;
  SCHEMA_TYPE_JSONSCHEMA=2;
}

message EventContract {
  string billing_id = 1;
  string handle = 2;
  string name = 3;
  string version = 4;
  string definition = 6;
  string status_message = 7;
  Status status = 8;
  string schema_handle = 9;
  string schema_name = 10;
  string schema_version = 11;
}

enum Status {
  STATUS_UNSPECIFIED = 0;
  STATUS_PENDING = 1;
  STATUS_IN_REVIEW = 2;
  STATUS_REJECTED = 3;
  STATUS_ACTIVE = 4;
  STATUS_DELETED = 5;
}

message CustomerProfile {
  string billing_id = 1;
  string limits = 2;
  string defaults = 3;
  string subscription_type = 4;
}

message StreamRelations {
  streammachine.external_api.entities.v1.Stream self = 1;
  streammachine.external_api.entities.v1.KeyStream key_stream = 2;
  repeated streammachine.external_api.entities.v1.Stream derived = 3;
  repeated streammachine.external_api.entities.v1.BatchExporter batch_exporters = 4;
  repeated streammachine.external_api.entities.v1.KafkaExporterRelations kafka_exporters = 5;
}

message KafkaExporterRelations {
  streammachine.external_api.entities.v1.KafkaExporter self = 1;
  repeated streammachine.external_api.entities.v1.KafkaUser users = 2;
}

message SinkRelations {
  streammachine.external_api.entities.v1.Sink self = 1;
  repeated streammachine.external_api.entities.v1.BatchExporter exporters = 2;
}
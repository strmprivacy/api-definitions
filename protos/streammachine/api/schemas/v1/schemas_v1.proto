syntax = "proto3";

package streammachine.api.schemas.v1;

import "streammachine/api/entities/v1/entities_v1.proto";

option go_package = "github.com/streammachineio/api-definitions-go/api/schemas/v1;schemas";
option java_package = "io.streammachine.api.schemas.v1";
option java_multiple_files = true;

service SchemasService {
  rpc ListSchemas (ListSchemasRequest) returns (ListSchemasResponse);
  rpc GetSchema (GetSchemaRequest) returns (GetSchemaResponse);
  rpc CreateSchema (CreateSchemaRequest) returns (CreateSchemaResponse);
  rpc GetSchemaCode (GetSchemaCodeRequest) returns (GetSchemaCodeResponse);
}

message ListSchemasRequest {
  string billing_id = 1;
  string filter = 2;
}

// (-- api-linter: core::0158::response-plural-first-field=disabled
//     aip.dev/not-precedent: Somehow this rule is not correctly checked here. --)
message ListSchemasResponse {
  repeated streammachine.api.entities.v1.Schema schemas = 1;
}

message CreateSchemaRequest {
  string billing_id = 1;
  streammachine.api.entities.v1.Schema schema = 2;
}

message CreateSchemaResponse {
  streammachine.api.entities.v1.Schema schema = 1;
}

message GetSchemaRequest {
  string billing_id = 1;
  streammachine.api.entities.v1.SchemaRef ref = 2;
  streammachine.api.entities.v1.KafkaClusterRef cluster_ref = 3;
}

message GetSchemaResponse {
  streammachine.api.entities.v1.Schema schema = 1;
  int32 confluent_id = 2 ;
}

message GetSchemaCodeRequest {
  string billing_id = 1;
  streammachine.api.entities.v1.SchemaRef ref = 2;
  streammachine.api.entities.v1.SchemaType type = 3;
}

message GetSchemaCodeResponse {
  string filename = 1;
  int64 data_size = 2;
  bytes data = 3;
}

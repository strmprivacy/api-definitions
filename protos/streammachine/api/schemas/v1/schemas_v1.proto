syntax = "proto3";

package streammachine.api.schemas.v1;

import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";
import "streammachine/api/entities/v1/entities_v1.proto";

option go_package = "github.com/strmprivacy/api-definitions-go/api/schemas/v1;schemas";
option java_package = "io.streammachine.api.schemas.v1";
option java_multiple_files = true;

service SchemasService {
  rpc ListSchemas (ListSchemasRequest) returns (ListSchemasResponse);
  rpc GetSchema (GetSchemaRequest) returns (GetSchemaResponse);
  rpc CreateSchema (CreateSchemaRequest) returns (CreateSchemaResponse);
  rpc UpdateSchema (UpdateSchemaRequest) returns (UpdateSchemaResponse);
  rpc GetSchemaCode (GetSchemaCodeRequest) returns (GetSchemaCodeResponse);
}

// List Schemas, with optional filters. All filters behave as AND conditions. OR is not possible.
message ListSchemasRequest {
  // The billing_id, used for authentication.
  // If absent, only public Schemas can be returned. If present, public and owned private Schemas can be returned.
  string billing_id = 1 [(google.api.field_behavior) = OPTIONAL];

  // Filter on a string to do a full-text search.
  string filter = 2 [(google.api.field_behavior) = OPTIONAL];

  // Filter on a given handle.
  string handle = 3 [(google.api.field_behavior) = OPTIONAL];

  // Filter on a given name.
  string name = 4 [(google.api.field_behavior) = OPTIONAL];

  // Filter public/private Schemas.
  streammachine.api.entities.v1.FilterPublicPrivate public_private = 5 [(google.api.field_behavior) = OPTIONAL];

  // Filter on the schema_type.
  streammachine.api.entities.v1.SchemaType schema_type = 6 [(google.api.field_behavior) = OPTIONAL];

  // Filter on labels. It is possible to skip the label value.
  // In that case, the filter only filters on the key.
  repeated streammachine.api.entities.v1.Label labels = 7 [(google.api.field_behavior) = OPTIONAL];

  // Filter on domains.
  repeated string domains = 8 [(google.api.field_behavior) = OPTIONAL];

  // Filter on industries.
  repeated string industries = 9 [(google.api.field_behavior) = OPTIONAL];
}

// (-- api-linter: core::0158::response-plural-first-field=disabled
//     aip.dev/not-precedent: Somehow this rule is not correctly checked here. --)
message ListSchemasResponse {
  repeated streammachine.api.entities.v1.Schema schemas = 1;
}

message GetSchemaRequest {
  string billing_id = 1;
  streammachine.api.entities.v1.SchemaRef ref = 2;
  streammachine.api.entities.v1.KafkaClusterRef cluster_ref = 3;
}

message GetSchemaResponse {
  streammachine.api.entities.v1.Schema schema = 1;
  int32 confluent_id = 2 ;
  string checksum = 3 [(google.api.field_behavior) = REQUIRED];
}

message CreateSchemaRequest {
  string billing_id = 1;
  streammachine.api.entities.v1.Schema schema = 2;
}

message CreateSchemaResponse {
  streammachine.api.entities.v1.Schema schema = 1;
  string checksum = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message UpdateSchemaRequest {
  string billing_id = 1 [(google.api.field_behavior) = REQUIRED];
  streammachine.api.entities.v1.Schema schema = 2 [(google.api.field_behavior) = REQUIRED];
  string checksum = 3 [(google.api.field_behavior) = REQUIRED];

  // The fields to update.
  google.protobuf.FieldMask update_mask = 4 [(google.api.field_behavior) = REQUIRED];
}

message UpdateSchemaResponse {
  streammachine.api.entities.v1.Schema schema = 1;
  string checksum = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message GetSchemaCodeRequest {
  string billing_id = 1;
  streammachine.api.entities.v1.SchemaRef ref = 2;
  // (-- api-linter: core::0143::standardized-codes=disabled
  //     aip.dev/not-precedent: language here is a programming language, not a human spoken language. --)
  string language = 3;
}

message GetSchemaCodeResponse {
  string filename = 1;
  int64 data_size = 2;
  bytes data = 3;
}
